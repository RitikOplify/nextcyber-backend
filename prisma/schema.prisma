generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  ACTIVE
  INACTIVE
}

model Admin {
  id                  String    @id @default(uuid())
  fullName            String
  email               String    @unique
  mobile              String    @unique
  resetPasswordToken  String?
  resetPasswordExpire DateTime?
  role                String    @default("admin")
  refreshToken        Json?
  password            String
  createdAt           DateTime  @default(now())
}

model Recruiter {
  id                  String          @id @default(uuid())
  profilePicture      Json?
  isActive            Status?         @default(ACTIVE)
  isDeleted           Boolean         @default(false)
  onboarding          Boolean         @default(false)
  resetPasswordToken  String?
  resetPasswordExpire DateTime?
  hearFrom            String?
  refreshToken        Json?
  firstName           String
  role                String          @default("recruiter")
  lastName            String
  password            String?
  email               String?
  jobs                JobPost[]
  company             CompanyProfile?
}

model StudentAccount {
  id                  String    @id @default(uuid())
  profilePicture      Json?
  refreshToken        Json?
  isActive            Status?   @default(ACTIVE)
  isDeleted           Boolean   @default(false)
  role                String    @default("candidate")
  hearFrom            String?
  onboarding          Boolean   @default(false)
  resetPasswordToken  String?
  resetPasswordExpire DateTime?
  firstName           String
  lastName            String
  password            String?
  email               String?
  location            String?
  currency            String?
  gender              String?
  anonymous           Boolean   @default(false)
  lookingForWork      Boolean   @default(false)
  expectedSalary      Float?
  hourlyRate          Float?
  nationalities       String[]
  languages           String[]

  education      Education[]
  workExperience WorkExperience[]

  resume Json?

  contractType String?
  remotePolicy String?
  certificates String[]
  skills       String[]
  jobs         JobPost[] @relation("JobPostToStudents")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  jobPostId String?
}

model Education {
  id        String         @id @default(uuid())
  studentId String
  institute String
  level     String
  startDate DateTime
  endDate   DateTime?
  student   StudentAccount @relation(fields: [studentId], references: [id])
}

model WorkExperience {
  id          String         @id @default(uuid())
  studentId   String
  jobTitle    String
  companyName String
  startDate   DateTime
  endDate     DateTime?
  description String?
  student     StudentAccount @relation(fields: [studentId], references: [id])
}

model CompanyProfile {
  id             String  @id @default(uuid())
  firstName      String?
  lastName       String?
  role           String
  gender         String
  companyName    String
  companyEmail   String  @unique
  companyWebsite String?
  headquarters   String
  founded        String?
  companySize    String?
  industry       String?
  facebook       String?
  linkedin       String?
  instagram      String?
  twitter        String?
  glassdoor      String?
  companyTagline String?
  about          String?

  profilePicture Json?
  bannerImage    Json?

  recruiterId String    @unique
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id           String       @id @default(uuid())
  name         String
  description  String
  price        Float
  currency     String       @default("USD")
  billingCycle BillingCycle @default(MONTHLY)
  userType     PlanUserType
  tag          String?
  ctaText      String
  features     Feature[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Feature {
  id     String  @id @default(uuid())
  text   String
  Plan   Plan?   @relation(fields: [planId], references: [id])
  planId String?
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum PlanUserType {
  recruiter
  candidate
}

model JobPost {
  id                 String           @id @default(uuid())
  title              String           @db.VarChar(100)
  description        String
  minExperience      Int
  maxExperience      Int
  contractType       ContractType
  remotePolicy       RemotePolicy
  languageRequired   String[]
  minSalary          Int?
  maxSalary          Int?
  currency           String?          @db.VarChar(10)
  showSalary         Boolean          @default(true)
  qualification      Qualification
  genderPreference   GenderPreference
  skills             String[]
  certifications     String[]
  location           String
  additionalBenefits String[]
  active             Boolean          @default(true)
  students           StudentAccount[] @relation("JobPostToStudents")
  recruiterId        String
  recruiter          Recruiter        @relation(fields: [recruiterId], references: [id])
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

enum ContractType {
  FREELANCE
  INTERNSHIP
  TEMPORARY_CONTRACT
  PERMANENT_CONTRACT
}

enum RemotePolicy {
  ONSITE
  HYBRID
  REMOTE
}

enum Qualification {
  HIGH_SCHOOL
  ASSOCIATE_DEGREE
  BACHELORS_DEGREE
  MASTERS_DEGREE
}

enum GenderPreference {
  ANY
  MALE
  FEMALE
}
